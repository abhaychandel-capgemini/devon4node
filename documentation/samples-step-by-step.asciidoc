:toc: macro

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

= Create the employee sample application step by step

Here, you will learn step by step how to create a devon4node application.

== Prerequisites

=== Typescript

In order to follow this guide, you must have a basic knowledge about typescript and its syntax. You can learn Typescript using these resources:

* link:https://github.com/soyrochus/diggingjsandts/blob/master/Digging%20(in)%20JavaScript%20and%20TypeScript.pdf[Digging (in) Javascript and Typescript]
* link:https://www.typescriptlang.org/docs/handbook/intro.html[Typescript handbook]
* link:https://basarat.gitbook.io/typescript/[Typescript Deep Dive]

=== Node.js

Node.js is the runtime used in devon4node. It is required a basic knowledge about Node.js before starting to use devon4node.

* link:https://nodejs.dev/learn/[Learn Node.js]

=== NestJS

devon4node is not a framework, is a set of good practices, modules and code generators to use with NestJS. In order to use devon4node, it requires NestJS basic knowledge. You can learn about NestJS in its link:https://docs.nestjs.com/[official documentation].

== Employee application

The `employee` is an application that allows you to manage your employee's information. With this applacation you will be able to register employees with its details, update existing employees details, get the registered employees and delete exiting employees.

In this guide, we will create the employee's application step by step, showing you how to create a devon4node application from scratch.

=== Application requisites

* A link:guides-configuration-module.asciidoc[configuration module], to manage different environments configuration properly.
* A SQLite in memory database managed by link:https://typeorm.io/[TypeORM].
* Security: link:https://docs.nestjs.com/security/cors[CORS] + link:https://docs.nestjs.com/security/helmet[security headers].
* link:https://docs.nestjs.com/openapi/introduction[OpenAPI] (aka Swagger) support following code-fist strategy.
* link:https://docs.nestjs.com/security/authentication#jwt-functionality[Authentication] using JWT.
* CRUD to manage employees.
** Create: only available for registered users.
** Read: available for everyone.
** Update: only available for registered users.
** Delete: only available for admins.
* Employees properties:
** name: mandatory string
** surname: mandatory string
** email: mandatory email string
** address: optional string

== Create the application

=== First steps (optional)

If this is the first time that you are using `NestJS` or `devon4node`, you need some packages installed globally in your machine:

* `Nest` CLI
+
[source,bash]
npm i -g @nestjs/cli
+
This will provide you the `nest` command.
+
* `devon4node` schematics
+
[source,bash]
npm i -g @devon4node/schematics
+
This will provide you the `devon4node` code generators.

`Yarn` is our preferred package manager. However, in this case we have used `npm` because the folder where npm global packages are installed is added to the PATH by default, while yarn's is not. You can use `yarn global add` if you add the yarn's bin folder to the PATH manually (use `yarn global bin` to get the bin folder path)

=== Create the application skeleton

To create a `devon4node` application, you must run the `nest new` command. If you use it without any extra parameter you will create a `NestJS` application. In order to generate a `devon4node` application, you need to run the following command:

[source,bash]
nest new -c @devon4node/schematics employee

When asked for package manager, you must choose `yarn`.

The output should be something like:

[source]
----
❯ nest new -c @devon4node/schematics employee
⚡  We will scaffold your app in a few seconds..

CREATE employee/.prettierrc (228 bytes)
CREATE employee/README.md (3340 bytes)
CREATE employee/nest-cli.json (121 bytes)
CREATE employee/package.json (2243 bytes)
CREATE employee/tsconfig.build.json (97 bytes)
CREATE employee/tsconfig.json (657 bytes)
CREATE employee/src/main.ts (836 bytes)
CREATE employee/test/app.e2e-spec.ts (630 bytes)
CREATE employee/test/jest-e2e.json (183 bytes)
CREATE employee/src/app/app.controller.spec.ts (617 bytes)
CREATE employee/src/app/app.controller.ts (274 bytes)
CREATE employee/src/app/app.module.ts (308 bytes)
CREATE employee/src/app/app.service.ts (142 bytes)
CREATE employee/.eslintrc.js (859 bytes)
CREATE employee/.husky/pre-commit (88 bytes)
CREATE employee/.vscode/extensions.json (63 bytes)
CREATE employee/.vscode/settings.json (150 bytes)
CREATE employee/src/app/core/core.module.ts (401 bytes)
CREATE employee/src/app/shared/exceptions/entity-not-found.exception.ts (419 bytes)
CREATE employee/src/app/shared/filters/entity-not-found.filter.ts (711 bytes)
CREATE employee/src/app/shared/logger/winston.logger.ts (2665 bytes)

? Which package manager would you ❤️  to use? yarn
----

Now you have a clean base application to start building. To do that, you can choose the pieces that you need, some provided by `devon4node` link:guides-code-generation.asciidoc[code generators], others not, but you must always follow the `devon4node` link:guides-key-principles.asciidoc[key principles] and link:guides-coding-conventions.asciidoc[coding conventions].

=== Configuration Module

There are many options to manage the application configuration. `NestJS` provides a link:https://docs.nestjs.com/techniques/configuration[module], but out prefered way is to use our own link:guides-configuration-module.asciidoc[configuration module]. The fastes way to include the configuration module into your project is using the following command:

[source]
nest g config-module

The output:

[source]
----
❯ nest g config-module
CREATE src/app/shared/model/config/config.model.ts (720 bytes)
CREATE src/config/default.ts (391 bytes)
CREATE src/config/develop.ts (209 bytes)
CREATE src/config/production.ts (210 bytes)
CREATE src/config/test.ts (366 bytes)
CREATE src/config/uat.ts (210 bytes)
UPDATE package.json (2323 bytes)
UPDATE src/app/shared/logger/winston.logger.ts (3179 bytes)
UPDATE src/app/core/core.module.ts (593 bytes)
UPDATE src/main.ts (1074 bytes)
✔ Packages installed successfully.
----

=== Database

In the `NodeJS` ecosystem there are many alternatives to connect to the database. You can use the drivers directly or use a ORM, but our recommendation is to use `TypeORM`.

`devon4node` provides a generator to integrate into your project link:https://typeorm.io/[TypeORM]. You only need to execute the command:

[source,bash]
nest g typeorm

Then, you must select the database when asked. In this example we will use `SQLite`.

The output:

[source]
----
❯ nest g typeorm
? What kind of database do you want to use? sqlite
CREATE docker-compose.yml (25 bytes)
CREATE ormconfig.json (467 bytes)
CREATE src/app/shared/model/entities/base-entity.entity.ts (484 bytes)
UPDATE package.json (2415 bytes)
UPDATE src/app/core/core.module.ts (863 bytes)
UPDATE src/app/shared/model/config/config.model.ts (863 bytes)
UPDATE src/config/default.ts (409 bytes)
UPDATE src/config/develop.ts (573 bytes)
UPDATE src/config/production.ts (574 bytes)
UPDATE src/config/test.ts (730 bytes)
UPDATE src/config/uat.ts (574 bytes)
✔ Packages installed successfully.
----

Now, you have your project already configured to work with `TypeORM`.

=== Security

To secure your application against common attacks, you only have to execute the following command:

[source]
nest g security

The output:

[source]
----
❯ nest g security
UPDATE package.json (2439 bytes)
UPDATE src/main.ts (1277 bytes)
✔ Packages installed successfully.
----

This installs in your application link:https://github.com/helmetjs/helmet[helmet], and enables link:https://docs.nestjs.com/security/helmet[helmet] and link:https://docs.nestjs.com/security/cors[CORS]

=== OpenAPI

To generate `OpenAPI` (aka `swagger`) documentation based in your code, you only need to execute:

[source]
nest g swagger

The output:

[source]
----
❯ nest g swagger
UPDATE package.json (2508 bytes)
UPDATE src/app/shared/model/config/config.model.ts (1162 bytes)
UPDATE src/config/default.ts (547 bytes)
UPDATE src/config/develop.ts (711 bytes)
UPDATE src/config/test.ts (868 bytes)
UPDATE src/main.ts (1876 bytes)
UPDATE nest-cli.json (196 bytes)
UPDATE src/app/shared/model/entities/base-entity.entity.ts (598 bytes)
✔ Packages installed successfully.
----

=== Authentication

To know all the details about `authenticaiton` in a `devon4node` (or `NestJS`) application, you can follow this link:https://docs.nestjs.com/security/authentication[guide].

In order to improve the productivity, `devon4node` has a code generator to add into your project everything described in that link:https://docs.nestjs.com/security/authentication#jwt-functionality[guide]:

[source]
nest g auth-jwt

The output should something similar to:

[source]
----
❯ nest g auth-jwt
CREATE src/app/core/auth/auth.module.ts (850 bytes)
CREATE src/app/core/auth/controllers/auth.controller.spec.ts (3037 bytes)
CREATE src/app/core/auth/controllers/auth.controller.ts (1311 bytes)
CREATE src/app/core/auth/decorators/get-user.decorator.ts (331 bytes)
CREATE src/app/core/auth/decorators/roles.decorator.spec.ts (869 bytes)
CREATE src/app/core/auth/decorators/roles.decorator.ts (163 bytes)
CREATE src/app/core/auth/guards/roles.guard.spec.ts (2277 bytes)
CREATE src/app/core/auth/guards/roles.guard.ts (708 bytes)
CREATE src/app/core/auth/model/login.dto.ts (360 bytes)
CREATE src/app/core/auth/model/roles.enum.ts (39 bytes)
CREATE src/app/core/auth/model/user-request.interface.ts (133 bytes)
CREATE src/app/core/auth/services/auth.service.spec.ts (3373 bytes)
CREATE src/app/core/auth/services/auth.service.ts (1263 bytes)
CREATE src/app/core/auth/strategies/jwt.strategy.spec.ts (690 bytes)
CREATE src/app/core/auth/strategies/jwt.strategy.ts (669 bytes)
CREATE src/app/core/user/user.module.ts (359 bytes)
CREATE src/app/core/user/model/dto/create-user.dto.ts (325 bytes)
CREATE src/app/core/user/model/dto/user-payload.dto.ts (181 bytes)
CREATE src/app/core/user/model/entities/user.entity.ts (542 bytes)
CREATE src/app/core/user/services/user.service.spec.ts (2083 bytes)
CREATE src/app/core/user/services/user.service.ts (1088 bytes)
CREATE test/auth/auth.service.mock.ts (913 bytes)
CREATE test/user/user.repository.mock.ts (1024 bytes)
UPDATE package.json (2779 bytes)
UPDATE src/app/core/core.module.ts (1017 bytes)
UPDATE src/app/shared/model/config/config.model.ts (1279 bytes)
UPDATE src/config/default.ts (617 bytes)
UPDATE src/config/develop.ts (781 bytes)
UPDATE src/config/production.ts (644 bytes)
UPDATE src/config/test.ts (938 bytes)
UPDATE src/config/uat.ts (644 bytes)
✔ Packages installed successfully.
----

=== Create the employee CRUD

Generate a CRUD into your project is fast and easy, your only need to execute the following command:

[source]
nest g resource employees

The output should something similar to:

[source]
----
❯ nest g resource employees
? What transport layer do you use? REST API
? Would you like to generate CRUD entry points? Yes
? Which ORM are you using? (No efect if you are not generating the CRUD) TypeORM
CREATE src/app/employees/employees.module.ts (458 bytes)
CREATE src/app/employees/controllers/employees.controller.spec.ts (616 bytes)
CREATE src/app/employees/controllers/employees.controller.ts (1224 bytes)
CREATE src/app/employees/services/employees.service.spec.ts (481 bytes)
CREATE src/app/employees/services/employees.service.ts (1999 bytes)
CREATE src/app/employees/model/dtos/create-employee.dto.ts (34 bytes)
CREATE src/app/employees/model/dtos/update-employee.dto.ts (180 bytes)
CREATE src/app/employees/model/entities/employee.entity.ts (169 bytes)
UPDATE src/app/app.module.ts (389 bytes)
UPDATE package.json (2817 bytes)
UPDATE test/app.e2e-spec.ts (609 bytes)
✔ Packages installed successfully.
----

This generate the entity, dtos, controllers and services to expose the CRUD for an empty `entity`, so now we need to customize it to add the properties, secure the endpoints as described before and improve the default generated OpenAPI documentation.

. Fill the link:https://typeorm.io/entities[entity] (`src/app/employees/model/entities/employee.entity.ts`) with the properties and ORM decorators.
+
.src/app/employees/model/entities/employee.entity.ts
[source,typescript]
----
@Entity()
export class Employee extends BaseEntity {
  @Column({ length: 255, nullable: false })
  name!: string;

  @Column({ length: 255, nullable: false })
  surname!: string;

  @Column({ length: 255, nullable: false })
  email!: string;

  @Column({ length: 255, nullable: true })
  address?: string;
}
----
+
. Fill the `DTOs` with the properties, the validators and the transformations.
+
.src/app/employees/model/dtos/create-employee.dto.ts
[source,typescript]
----
export class CreateEmployeeDto {
  @IsDefined()
  @IsString()
  @MaxLength(255)
  @Expose()
  name!: string;

  @IsDefined()
  @IsString()
  @MaxLength(255)
  @Expose()
  surname!: string;

  @IsDefined()
  @IsString()
  @IsEmail()
  @MaxLength(255)
  @Expose()
  email!: string;

  @IsOptional()
  @IsString()
  @MaxLength(255)
  @Expose()
  address?: string;
}
----
+
The `@Expose()` decorator is important, if you forget it the link:https://docs.nestjs.com/pipes#transformation-use-case[transformation pipe] will ignore it. It works in that way in order to ignore extra fields that are not defined in the DTO.
+
. secure endpoints:
+
In order to require authentication to your enpoints, you only need to add the `AuthGuard` guard as shown below:
+
.src/app/employees/controllers/employees.controller.ts
[source,typescript]
----
@Post()
@UseGuards(AuthGuard())
create(@Body() createEmployeeDto: CreateEmployeeDto): Promise<Employee> {
  return this.service.create(createEmployeeDto);
}
----
+
Now, you need to provide a valid `Bearer JWT token` in order to use the create endpoint. Also, to require a specific role to use an endpoint, you need to use the provided `RolesGuard` and specify the allowed roles by using the `@Roles` decorator:
+
.src/app/employees/controllers/employees.controller.ts
[source,typescript]
----
@Delete(':id')
@UseGuards(AuthGuard(), RolesGuard)
@Roles(roles.ADMIN)
remove(@Param('id') id: string): Promise<Employee> {
  return this.service.remove(+id);
}
----
+
. Add swagger metadata
+
.src/app/employees/controllers/employees.controller.ts
[source,typescript]
----
@ApiTags('employees')
----
+
. Add swagger metadata
+
By default, devon4node installs the link:https://docs.nestjs.com/openapi/cli-plugin[`@nestjs/swagger` plugin]. With that plugin, most of the `OpenAPI` documentation will be generated automatically, but you can provide more information with decorators:
+
.src/app/employees/controllers/employees.controller.ts
[source,typescript]
----
@Controller('employees')
@ApiTags('employees')
export class EmployeesController {
  ...
}
----
+
Also, you can add to the `OpenAPI` documentation the secured endpoints:
+
.src/app/employees/controllers/employees.controller.ts
[source,typescript]
----
@ApiBearerAuth()
----
+
As the `findAll` returns a complex type, the plugin can't infer the return type properly. To documentate properly the return type of the `findAll` you can use the `@nestjs/swagger` decorators:
+
.src/app/employees/controllers/employees.controller.ts
[source,typescript]
----
@Get()
@ApiQuery({ name: 'pageNumber', type: String, required: false })
@ApiQuery({ name: 'pageSize', type: String, required: false })
@ApiOkResponse({
  schema: {
    oneOf: [
      { type: 'array', items: { $ref: getSchemaPath(Employee) } },
      {
        type: 'object',
        properties: {
          content: { type: 'array', items: { $ref: getSchemaPath(Employee) } },
          page: {
            type: 'object',
            properties: { pageNumber: { type: 'number' }, total: { type: 'number' }, pageSize: { type: 'number' } },
          },
        },
      },
    ],
  },
})
findAll(@GetPage() page?: PageRequest): Promise<Employee[] | Page<Employee>> {
  return this.service.findAll(page);
}
----
+
. Generate database migrations
+
As you're building a new application you also need to create the database tables. `TypeORM` provides a mechanism to generate the database migrations based on your entities:
+
[source]
----
yarn build
npx typeorm migration:generate -n CreateTables
----
+
The output will be something similar to:
+
.src/migration/1655725262254-CreateTables.ts
[source,typescript]
----
export class CreateTables1655725262254 implements MigrationInterface {
  name = 'CreateTables1655725262254';

  public async up(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(
      `CREATE TABLE "employee" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "version" integer NOT NULL DEFAULT (1), "createdAt" datetime NOT NULL DEFAULT (datetime('now')), "updatedAt" datetime NOT NULL DEFAULT (datetime('now')), "name" varchar(255) NOT NULL, "surname" varchar(255) NOT NULL, "email" varchar(255) NOT NULL, "address" varchar(255))`,
    );
    await queryRunner.query(
      `CREATE TABLE "user" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "version" integer NOT NULL DEFAULT (1), "createdAt" datetime NOT NULL DEFAULT (datetime('now')), "updatedAt" datetime NOT NULL DEFAULT (datetime('now')), "username" varchar(255) NOT NULL, "password" varchar(255) NOT NULL, "role" integer NOT NULL DEFAULT (0))`,
    );
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(`DROP TABLE "user"`);
    await queryRunner.query(`DROP TABLE "employee"`);
  }
}
----
+
The number in the name is a timestamp, so may change in your application.
+
Now, you can populate the database with the initial data:
+
[source]
----
npx typeorm migration:create -n InsertData
----
+
and fill in with the following code:
+
.src/migration/1655725316517-CreateTables.ts
[source,typescript]
----
export class InsertData1655725316517 implements MigrationInterface {
  public async up(queryRunner: QueryRunner): Promise<any> {
    await queryRunner.query(
      `INSERT INTO EMPLOYEE(id, name, surname, email) VALUES(1, 'Santiago', 'Fowler', 'Santiago.Fowler@example.com');`,
    );
    await queryRunner.query(
      `INSERT INTO EMPLOYEE(id, name, surname, email) VALUES(2, 'Clinton', 'Thornton', 'Clinton.Thornton@example.com');`,
    );
    await queryRunner.query(
      `INSERT INTO EMPLOYEE(id, name, surname, email) VALUES(3, 'Lisa', 'Rodriquez', 'Lisa.Rodriquez@example.com');`,
    );
    await queryRunner.query(
      `INSERT INTO EMPLOYEE(id, name, surname, email) VALUES(4, 'Calvin', 'Becker', 'Calvin.Becker@example.com');`,
    );
    await queryRunner.query(`INSERT INTO USER(id, username, password, role) VALUES(?, ?, ?, ?);`, [
      1,
      'user',
      await hash('password', await genSalt(12)),
      roles.USER,
    ]);
    await queryRunner.query(`INSERT INTO USER(id, username, password, role) VALUES(?, ?, ?, ?);`, [
      2,
      'admin',
      await hash('admin', await genSalt(12)),
      roles.ADMIN,
    ]);
  }

  public async down(queryRunner: QueryRunner): Promise<any> {
    await queryRunner.query(`DELETE FROM EMPLOYEE`);
    await queryRunner.query(`DELETE FROM USER`);
  }
}
----
+
. Start the application: `yarn start:dev`
+
image::images/sample/start-app.png[]
+
. Check the swagger endpoint: `http://localhost:3000/v1/api`
+
image::images/sample/swagger.png[]
+
. Make petitions to the employee CRUD: `http://localhost:3000/v1/employees`
+
image::images/sample/employees.png[]
